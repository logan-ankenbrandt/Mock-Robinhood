1. Goal
    - Write a function that takes the prices as an
    input and returns a new price, either 4% lower or
    5% higher depending on the current price's index, 
    and adds it to the array.
2. Example
    - Input
        a. 5
    - Output
        a. [5, 5.25, 5.04, 5.29, 5.08...]
3. Implementation
    - Steps
        a. api/
            i. Initialize a function in the index.js
            file of the api folder.
            ii. In the index.js file, initialize a function that
            takes the prices array as an input and returns a new value to
            append to the array.    
                - Will need to adapt the prices field in the
                models file to be an array.
            iii. In the function within the index.js file,
            you will need to:
                - Initialize a variable that will hold the length of the
                array.
                - Initialize a for loop to loop over the array.
                - Within the for loop, write a conditional that checks:
                    a. If last index (plus 1) is even
                        i. The new price will be 4% lower than the last 
                        price.
                        ii. Append the new value to a new array
                        iii. Use the axios .patch() method to update the
                        prices array in the database.
                            - You will need the id of that price 
                    b. If the last index (plus 1) is odd
                        i. The new price be 5% higher than the last price.
                        ii. Append the new value to the array.
                        iii. Use the axios .patch() method to update the
                        prices array in the database.
                            - You will need the id of that price 
                - At the bottom of the function, you will need
                to use the patch() function from axios to update
                the data in the array.
        b. server/
            i. In the index.js file, simply run the above function 
            every second.
    - Summary

DATA 
[{"_id":"612faeb4e375d0928eda34f0","ticker":"ABNB","price":[180.56],"__v":0},
{"_id":"612faeb9e375d0928eda34f2","ticker":"AMZN","price":[3230.42],"__v":0},
{"_id":"612faebde375d0928eda34f4","ticker":"MSFT","price":[195.23],"__v":0},
{"_id":"612faec0e375d0928eda34f6","ticker":"SNOW","price":[298.98],"__v":0},
{"_id":"612faec7e375d0928eda34f8","ticker":"TSLA","price":[722.57],"__v":0}]

POST

curl http://localhost:8000/api/stocks -X POST -H "Content-Type: application/json" -d '{"ticker":"ABNB", "price":"180.56"}'
curl http://localhost:8000/api/stocks -X POST -H "Content-Type: application/json" -d '{"ticker":"AMZN", "price":"3230.42"}'
curl http://localhost:8000/api/stocks -X POST -H "Content-Type: application/json" -d '{"ticker":"MSFT", "price":"195.23"}'
curl http://localhost:8000/api/stocks -X POST -H "Content-Type: application/json" -d '{"ticker":"SNOW", "price":"298.98"}'
curl http://localhost:8000/api/stocks -X POST -H "Content-Type: application/json" -d '{"ticker":"TSLA", "price":"722.57"}'

DELETE

curl http://localhost:8000/api/stocks/6130249730810f0e38660088 -X DELETE
curl http://localhost:8000/api/stocks/6130249730810f0e3866008a -X DELETE
curl http://localhost:8000/api/stocks/6130249730810f0e3866008c -X DELETE
curl http://localhost:8000/api/stocks/6130249730810f0e3866008e -X DELETE
curl http://localhost:8000/api/stocks/6130249830810f0e38660090 -X DELETE

1. Implementation
    - Steps
        a. Frontend
            i. Adjusted the StockList component
            to re-render every 1/4th of a second 
            to find new data.
            ii. Adjusted the SingleStock component 
            to only pull from the back of the newly initialized 
            prices array.
        b. Server 
            i. In the index.js file, initialize a function that
            will be called every 1/2 of a second.
            ii. In the models/Stock.js file, I wrapped the price 
            field in a new array.
        c. API
            i. In the api/index.js file, initialized the updatePrices()
            function to update the prices array in the database when called.
    - Summary
        a. This stage in the project was focused on the core functionality - 
        the ability to continuously update the prices array in the database.
        It required me to use the axios .patch() method to update the prices
        in the API.
        b. Furthermore, I had to take into considerations the network
        latency of the server. I had to make sure that the prices array
        was updated in the database before the frontend was updated. This led me
        to using a recursive version of the setTimeout() function to update the 
        prices array in the database without stacking the requests, and it led
        me to deleting the first two elements in the prices array every other 
        iteration to ensure that the server could handle the requests.